// SPDX-FileCopyrightText: 2024 Friedrich-Alexander-Universitat Erlangen-Nurnberg
//
// SPDX-License-Identifier: AGPL-3.0-only

// Exercise3 : Goods
// Learning goals:
// - Understand the core concepts Remove metadata

// This Jayvee model describes a pipeline
// from a CSV file in the web to a SQLite file sink.
pipeline GoodsPipeline {
    // connecting the block GoodsExtractor
    // with the block GoodsTextFileInterpreter.
    GoodsExtractor -> GoodsTextFileInterpreter;
    GoodsTextFileInterpreter
        -> GoodsCSVInterpreter
        -> HeaderTimeSequenceWriter
        -> HeaderQuantitySequenceWriter
        -> GoodsCoreDataSelector
        -> GoodsTableInterpreter
        -> GoodsLoader;

    // Below the pipes, define the blocks that are connected by the pipes.
    block GoodsExtractor oftype HttpExtractor {

        // Here, we specify the URL where the file shall be downloaded from.
        url: "https://www-genesis.destatis.de/genesis/downloads/00/tables/46131-0014_00.csv";
    }

    // The HttpExtractor requires no input and produces a binary file as output.
    // This file has to be interpreted, e.g., as text file.
    block GoodsTextFileInterpreter oftype TextFileInterpreter {
        encoding : "latin3";
    }

    // interpreting this text file as sheet.
   block GoodsCSVInterpreter oftype CSVInterpreter {
       delimiter: ";";
      
   }
     block HeaderTimeSequenceWriter oftype CellWriter {
        at: range A8:E8;
        // specify the first column value is written into the cell.
        write: ["year" , "month","goods_id", "goods_name", "goods_source"];
    }
     block HeaderQuantitySequenceWriter oftype CellWriter {
        at:  range AT8:AU8;
      //   specify the first column value is written into the cell.
        write: ["abroad", "total"];
    }
     block GoodsCoreDataSelector oftype CellRangeSelector {
        select: range A8:AU*;
    }

    valuetype  PositiveIntegers oftype integer {
        constraints: [ PositiveInt ];
        }
    constraint PositiveInt oftype RangeConstraint {
        lowerBound: 0;
        }

     valuetype  Month oftype text {
        constraints: [ GermanMonth ];
        }
    constraint GermanMonth oftype AllowlistConstraint {
        allowlist: ["Januar", "Februar", "MÃ¤rz", "April", "Mai", "Juni", "Juli" 
                  , "August" , "September" , "Oktober" , "November" , "Dezember"];
        }
    valuetype ID oftype text {
        constraints: [ GoodsID ];
        }
    constraint GoodsID oftype RegexConstraint {
        regex: /^NST7-.*\b$/;
        }

    block GoodsTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "year"	 oftype PositiveIntegers,
	        "month" oftype	Month,
	        "goods_id"	oftype ID,
	        "goods_name"	oftype text,
	        "goods_source"	oftype text,
	        "abroad"	oftype PositiveIntegers,
            "total"	oftype PositiveIntegers,

        ];
    }

    // The structural information of the table is used to generate the correct table.
    block GoodsLoader oftype SQLiteLoader {
        table: "goods";
        file: "./goodsTransportedByTrain.sqlite";
    }
    // run <jv exercise3.jv> successfully.
}